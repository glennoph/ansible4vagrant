#+OPTIONS: num:nil toc:nil
#+REVEAL_TRANS: default
#+REVEAL_THEME: sky
#+REVEAL_PLUGINS: (highlight)
#+Title: ansible 4 vagrant
#+Author: glenn opdycke-hansen
#+Email: glennoph@gmail.com

* Motivation
  - Ansible use case is to deploy an application after a build.
  - The build is executed first which can take 10-20 minutes
  - Changes in the ansible code are slowed due to the build timing.
  - Need a way to quickly run the ansible code in order to test changes.
* First Option: Ansible from Vagrant
Vagrant supports provision of VM via ansible
** Installs
*** Install Ansible
  - Ansible Installation Guild contains the instructions to install the control machine
  - See [[https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html][ansible install guide]]
  - Check version :: ~ansible --version~

*** Install Vagrant
#+BEGIN_QUOTE
Vagrant is utility for managing the lifecycle of virtual machines
#+END_QUOTE

  - To install vagrant, see [[https://www.vagrantup.com/docs/installation/][vagrant installation]]
  - Vagrant allows you to start virtual machines.
  - It also can provision the VM with Ansible

#+begin_src python
config.vm.provision "ansible" do |ansible|
  ansible.playbook = "playbook.yml"
end
#+end_src

  - vagrant version :: ~vagrant --version~

*** Install Virtualbox

#+BEGIN_QUOTE
VirtualBox is a virtualizer for x86 hardware
#+END_QUOTE

- Install package from [[https://www.virtualbox.org/wiki/Downloads][VirtualBox Downloads]]
  - virtualbox version :: virtualbox --version

** Setup
- Create directory for the project, eg, **ansible4vagrant**
- List the vagrant boxes
#+BEGIN_SRC 
vagrant box list
#+END_SRC

- Add Vagrant box for centos/7 - downloads vm image
#+BEGIN_SRC 
vagrant box add centos/7
#+END_SRC

- Init Vagrantfile for Centos v7 box for vagrant with command: 
#+BEGIN_SRC 
vagrant init centos/7
#+END_SRC

** Vagrant Start/Test/End
  - Start/add/boot Centos vm  
#+BEGIN_SRC 
vagrant up
#+END_SRC
  - Check status of vm 
#+BEGIN_SRC 
vagrant status
#+END_SRC
  - provision vm with ansible
#+BEGIN_SRC 
vagrant provision
#+END_SRC
  - SSH to vm
#+BEGIN_SRC 
vagrant ssh
#+END_SRC
  - Shutdown vm
#+BEGIN_SRC 
vagrant halt
#+END_SRC
** Vagrant Reload/Provision
- how to shutdown, startup VM
#+BEGIN_SRC 
vagrant reload
#+END_SRC
- how to execute the ansible script
#+BEGIN_SRC 
vagrant provision
#+END_SRC

* Adding Testinfra to Vagrant/Ansible
- Use Vagrant Provision/execute Ansible scripts
- Add py.test tests that are executed by Testinfra
- Branch: https://github.com/glennoph/ansible4vagrant/tree/ansible-replace-tokens-role-testinfra
** Installs
*** Install Testinfra
  - Install :: `pip install testinfra`
  - Current Version :: 2.0.0
  - Check version :: `testinfra --version`
** Test Example
 - file :: test infra.py

#+BEGIN_SRC 
# test_infra.py
def test_passwd_file(host):
    passwd = host.file("/etc/passwd")
    assert passwd.contains("root")
    assert passwd.user == "root"
#+END_SRC

** test execution
 - file :: tests setup.sh

#+BEGIN_SRC
echo 'save ssh config'
vagrant ssh-config > .vagrant/ssh-config

echo 'run tests with hosts default'
py.test --hosts=default --ssh-config=.vagrant/ssh-config tests/test_vagrant.py
#+END_SRC

** Test Vagrant
*** test setup
 - file :: `tests-vagrant.sh`

#+BEGIN_SRC
echo 'save ssh config'
vagrant ssh-config > .vagrant/ssh-config

echo 'run tests with hosts default'
py.test --hosts=default --ssh-config=.vagrant/ssh-config tests/tests-vagrant.py
#+END_SRC

*** test
- file :: `tests/test_vagrant.py`

#+BEGIN_SRC 
# test_vagrant.py

def test_datafile1(host):
    datafile1_file = host.file('/data/file1.properties')
    assert datafile1_file.exists
    assert datafile1_file.is_file
    assert datafile1_file.contains('token') == False
#+END_SRC
